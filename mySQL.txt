to create a table ==>
            CREATE TABLE teachers (
            id INTEGER, 
            NAME TEXT, 
            age INTEGER
            );


to insert a value/row in table ==>

        INSERT INTO teachers (id, age, NAME) VALUES (12, 35, "Sujon");


not to get any duplicate items ==> 
        SELECT DISTINCT NAME FROM teachers;

WHERE clause filters the result set to only include rows where the following condition is true.
                SELECT *
                FROM movies
                WHERE imdb_rating > 8;


LIKE can be a useful operator when you want to compare similar values.
                SELECT * 
                FROM movies
                WHERE name LIKE 'Se_en';


to get only start or end with letter ==>
                SELECT * 
                FROM movies
                WHERE name LIKE 'A%';

                 SELECT * 
                FROM movies
                WHERE name LIKE '%A';

                 SELECT * 
                FROM movies
                WHERE name LIKE 'The %';

to get any value of colume is null or not null ==>

                SELECT name
                FROM movies 
                WHERE imdb_rating IS NOT NULL;
                

                SELECT name
                FROM movies 
                WHERE imdb_rating IS NULL;


get any value between ==>

                SELECT *
                FROM movies
                WHERE year BETWEEN 1990 AND 1999;

                SELECT *
                FROM movies
                WHERE name BETWEEN 'A' AND 'C';
                ==> return values only name starts with A & B.


And operator 

                SELECT * 
                FROM movies
                WHERE year BETWEEN 1990 AND 1999
                AND genre = 'romance';

                SELECT * 
                FROM movies
                WHERE year < 1985
                AND genre = 'horror';

OR operator
                SELECT *
                FROM movies
                WHERE year > 2014
                OR genre = 'action';


                SELECT *
                FROM movies
                WHERE genre = 'romance'
                OR genre = 'comedy';
Order by ==> 

                SELECT name, year
                FROM movies
                ORDER BY name;

                SELECT name, year, imdb_rating
                FROM movies
                ORDER BY imdb_rating desc;

                SELECT name, year, imdb_rating
                FROM movies
                ORDER BY imdb_rating asc;

Limit ===>

                SELECT *
                FROM movies
                order by imdb_rating desc
                LIMIT 3;

Case ==>

                SELECT name,
                CASE
                WHEN genre = 'romance' THEN 'Chill'
                WHEN genre = 'comedy' THEN 'Chill'
                ELSE 'Intense'
                END AS 'Mood'
                FROM movies;

                SELECT name,
                CASE
                WHEN imdb_rating > 8 THEN 'Fantastic'
                WHEN imdb_rating > 6 THEN 'Poorly Received'
                ELSE 'Avoid at All Costs'
                END AS 'Review'
                FROM movies;
Calculations =====>

to count ===>

                select count(*) from fake_apps where price = 0;

 Sum ===>

                SELECT SUM(downloads)
                FROM fake_apps;               
MAX MIN ===>

                SELECT MAX(downloads)
                FROM fake_apps;
Avg ===> 

                SELECT AVG(price)
                FROM fake_apps;

round ====>
                SELECT name, ROUND(price, 0)
                FROM fake_apps;

                select round(avg(price), 2) from fake_apps;

Group by ===>

                SELECT category, SUM(downloads)
                FROM fake_apps
                group by category;

                SELECT year,
                AVG(imdb_rating)
                FROM movies
                GROUP BY year
                ORDER BY year;


Work With Multiple table 

Combining Tables with SQL
13 min
Combining tables manually is time-consuming. Luckily, SQL gives us an easy sequence for this: it’s called a 
Preview: Docs The JOIN clause allows for the return of results from more than one table by joining them together with other results based on common column values specified using an ON clause.
JOIN
.

If we want to combine orders and customers, we would type:

SELECT *
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;

Copy to Clipboard

Let’s break down this command:

The first line selects all columns from our combined table. If we only want to select certain columns, we can specify which ones we want.
The second line specifies the first table that we want to look in, orders
The third line uses JOIN to say that we want to combine information from orders with customers.
The fourth line tells us how to combine the two tables. We want to match orders table’s customer_id column with customers table’s customer_id column.
Because column names are often repeated across multiple tables, we use the syntax table_name.column_name to be sure that our requests for columns are unambiguous. In our example, we use this syntax in the ON statement, but we will also use it in the 
Preview: Docs Loading link description
SELECT
 or any other statement where we refer to column names.

For example: Instead of selecting all the columns using *, if we only wanted to select orders table’s order_id column and customers table’s customer_name column, we could use the following query:

SELECT orders.order_id,
   customers.customer_name
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;

Copy to Clipboard

Instructions
Checkpoint 1 Failed, try again
1.
Join orders table and subscriptions table and select all columns.

Make sure to join on the subscription_id column.

Checkpoint 2 Step instruction is unavailable until previous steps are completed
2.
Don’t remove the previous query.

Add a second query after your first one that only selects rows from the join where description is equal to ‘Fashion Magazine’.


====>
select * from orders join subscriptions on orders.subscription_id = subscriptions.subscription_id;


left join ===>
select * from newspaper left join online on newspaper.id = online.id;
select * from newspaper left join online on newspaper.id = online.id where online.id is null;

inner join ===>
select count() from newspaper;
select count() from online;
select count() from newspaper join online on newspaper.id = online.id;


=====> 
Let’s return to our example of the magazine subscriptions. Recall that we had three tables: orders, subscriptions, and customers.

Each of these tables has a column that uniquely identifies each row of that table:

order_id for orders
subscription_id for subscriptions
customer_id for customers
These special columns are called 
Preview: Docs Primary keys are special columns used to uniquely identify each row of a table in SQL.
primary keys
.

Primary keys have a few requirements:

None of the values can be NULL.
Each value must be unique (i.e., you can’t have two customers with the same customer_id in the customers table).
A table can not have more than one primary key column.


select * from classes join students on classes.id = students.class_id;




Cross Join
17 min
So far, we’ve focused on matching rows that have some information in common.

Sometimes, we just want to combine all rows of one table with all rows of another table.

For instance, if we had a table of shirts and a table of pants, we might want to know all the possible combinations to create different outfits.



select count(*) from newspaper where start_month <=3
and end_month >= 3;

SELECT *
FROM newspaper
CROSS JOIN months;


select * from newspaper cross join months where newspaper.start_month <= months.month and newspaper.end_month >= months.month;

SELECT month,
  COUNT(*)
FROM newspaper
CROSS JOIN months
WHERE newspaper.start_month <= months.month and newspaper.end_month >= months.month
GROUP BY month;
